{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/wgsl.md","hash":"e1f1809dee938a43e2883b0cda753b706864707d","modified":1736392924632},{"_id":"source/_posts/wgsl/light.png","hash":"a530f2e49bd4e638be79178b2dcf6bd7c1bf6908","modified":1736391335262},{"_id":"source/_posts/wgsl/points.png","hash":"28dca5d795f0758f7a957959462b2613eb64972a","modified":1736391335262},{"_id":"source/_posts/wgsl/aura.png","hash":"2555b0b2bd82aecc06d8b3bee892bcb697b1fbc8","modified":1735783610420},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1735268192196},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1735268192196}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"wgsl","date":"2024-12-27T03:03:01.000Z","_content":"\n# 指针着色器 \n## 介绍\n![光环着色器](wgsl/aura.png)\n这个着色器只包含片元着色器代码，通过对像素点uv的计算显示指针\n\n| 方法 | 描述 |\n| --- | --- |\n| atan2(y, x) | 计算y/x的反正切值,返回值的范围是−π,π。返回一个值使得tan(e)=y/x |\n| smoothstep(min, max, x) | 平滑插值函数。公式：x * x * (3 - 2 * x) |\n| step(edge, x) | 阶跃函数，x<edge返回0，x>edge返回1 |\n\n## 代码\n```wgsl\n#import bevy_pbr::forward_io::{VertexOutput, FragmentOutput};\n#import bevy_pbr::mesh_view_bindings::globals\n#import bevy_render::view::View\n\n/// Keep up-to-date with the rust definition!\nstruct AuraMaterial {\n    unused: f32,\n}\n\n@group(0) @binding(0)   var<uniform> view: View;\n@group(2) @binding(100) var<uniform> aura_mat: AuraMaterial;\n\n// Colour picker tells us the values of the original..\n// Darkish\n// #CEAA4F\nconst GOLD = vec3f(0.807843, 0.666667, 0.309804);\nconst SPIKE_NUM: f32 = 9.0;\nconst SPIKE_LEN: f32 = 0.68;\nconst SPIKE_SPEED:f32 = 32.0;\nconst PI: f32 =  3.141592653589;\n\n@fragment\nfn fragment(in: VertexOutput) -> @location(0) vec4<f32> {\n    var uv = in.uv;\n    uv = uv * 2.0 - 1.0;\n    let x =(atan2(uv.x, uv.y) / PI + 1) * SPIKE_NUM; // Divide the x coords by PI so they line up perfectly.\n\n    // 计算光针边缘\n    let f_x = fract(x);\n    var m = min(f_x, 1.0 - f_x);\n    m = m  + 0.5*length(uv);\n    \n    // 计算当前像素值:\n    var c = smoothstep(0.5,  0.0, m);\n    var col = vec3f(c);\n\n    // 全局时间计算指针位置\n    let time = globals.time;\n    let time_circle_index = floor(time * SPIKE_SPEED) % (SPIKE_NUM * 2.0);\n    let focus_length = min(abs(time_circle_index - x), abs(time_circle_index + 2*SPIKE_NUM - x));\n    let is_focused_spike = step(0.5, focus_length);\n    col *= mix(GOLD / 0.15, GOLD * 0.54, is_focused_spike);\n\n    // 不显示中间\n    let feet_mask = length(uv) - 0.25;\n    col *= smoothstep(0.0, 0.09, feet_mask);\n\n    // 输出\n    var out = vec4f(col, 1.0);\n    return out;\n}\n```\n\n# 闪烁线条\n## 介绍\n在表面形成闪烁变化的网格,grid函数显示宽度为`1.0/GRID_RATIO`的线条\n![](wgsl/light.png)\n\n## 代码\n```wgsl\n#import bevy_pbr::mesh_view_bindings::globals\n#import bevy_sprite::mesh2d_vertex_output::VertexOutput\n\nconst GRID_RATIO:f32 = 40.;\n\n@fragment\nfn fragment(in: VertexOutput) -> @location(0) vec4<f32> {\n    let t = globals.time;\n    var uv = in.uv - 0.5;\n    var col = vec3(0.0);\n\n    uv *= 10.;\n    let grid = grid(uv);\n    let pal = palette(t / 2. );\n    col = mix(col, pal, grid);\n   \n    return vec4<f32>(col, 1.0);\n}\n\n// 变幻彩色\nfn palette(time : f32) -> vec3<f32> {\n    let a = vec3<f32>(0.5, 0.5, 0.5);\n    let b = vec3<f32>(0.5, 0.5, 0.5);\n    let c = vec3<f32>(1.0, 1.0, 1.0);\n    let d = vec3<f32>(0.263, 0.416, 0.557);\n\n    return a + b * cos(6.28318 * (c * time + d));\n}\n\n// 显示网格\nfn grid(uv: vec2<f32>)-> f32 {\n    let i = step(fract(uv), vec2(1.0/GRID_RATIO));\n    return max(i.x, i.y);\n}\n\nfn hsv2rgb(c: vec3<f32>) -> vec3<f32> {\n    let K: vec4<f32> = vec4<f32>(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    var p: vec3<f32> = abs(fract(vec3<f32>(c.x) + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, vec3<f32>(0.0), vec3<f32>(1.0)), c.y);\n}\n```\n\n# 随机粒子\n物体表面随机生成随机运动的粒子.通过fft生成一个连续伪随机函数,随时间变化生成粒子的xy坐标,通过冰花过渡显示\n```js\n// js生成连续伪随机函数\ns = ''\nfor (let i = 0;i<10;i++) {\n  s += Math.random().toFixed(4) + '*sin('+Math.pow(2,i) +'*x)+' + Math.random().toFixed(4)  + '*cos('+Math.pow(2,i) +'*x)+'\n}\n\n```\n![](wgsl/points.png)\n\n## 代码\n```wgsl\n#import bevy_pbr::mesh_view_bindings globals\n#import bevy_sprite::mesh2d_vertex_output::VertexOutput\n\n@fragment\nfn fragment(in: VertexOutput) -> @location(0) vec4<f32> {\n    let uv: vec2<f32> = in.uv;\n\n    var m = 0.;\n    let t: f32 = globals.time / 100;\n    for (var i = 0; i < 30; i += 1) {\n        let n:vec2<f32> = vec2(rand(t + f32(i )* 2.0), rand(t + 0.5 + f32(i) * 2.0));\n        let d = length(uv - n);\n        m += smoothstep(0.002, 0.001, d);\n    }\n\n    var col = vec3(m);\n    return vec4(col, 1.0);\n}\n\n// fft构造的连续伪随机树\nfn rand(x: f32) -> f32 {\n    // fft 随机数\n    var y = 0.1042*sin(1*x)+0.7563*cos(1*x)+0.4530*sin(2*x)+0.6678*cos(2*x)+0.8024*sin(4*x)+0.1780*cos(4*x)+0.2779*sin(8*x)+0.4869*cos(8*x)+0.2147*sin(16*x)+0.5170*cos(16*x)+0.0115*sin(32*x)+0.6059*cos(32*x)+0.9722*sin(64*x)+0.1842*cos(64*x)+0.9056*sin(128*x)+0.6755*cos(128*x)+0.1378*sin(256*x)+0.6769*cos(256*x)+0.2455*sin(512*x)+0.8363*cos(512*x);\n    y = (y / 10) / 2 + 0.5;\n    return min(max(0.0, y), 1.0);\n}\n```","source":"_posts/wgsl.md","raw":"---\ntitle: wgsl\ndate: 2024-12-27 11:03:01\ntags:\n---\n\n# 指针着色器 \n## 介绍\n![光环着色器](wgsl/aura.png)\n这个着色器只包含片元着色器代码，通过对像素点uv的计算显示指针\n\n| 方法 | 描述 |\n| --- | --- |\n| atan2(y, x) | 计算y/x的反正切值,返回值的范围是−π,π。返回一个值使得tan(e)=y/x |\n| smoothstep(min, max, x) | 平滑插值函数。公式：x * x * (3 - 2 * x) |\n| step(edge, x) | 阶跃函数，x<edge返回0，x>edge返回1 |\n\n## 代码\n```wgsl\n#import bevy_pbr::forward_io::{VertexOutput, FragmentOutput};\n#import bevy_pbr::mesh_view_bindings::globals\n#import bevy_render::view::View\n\n/// Keep up-to-date with the rust definition!\nstruct AuraMaterial {\n    unused: f32,\n}\n\n@group(0) @binding(0)   var<uniform> view: View;\n@group(2) @binding(100) var<uniform> aura_mat: AuraMaterial;\n\n// Colour picker tells us the values of the original..\n// Darkish\n// #CEAA4F\nconst GOLD = vec3f(0.807843, 0.666667, 0.309804);\nconst SPIKE_NUM: f32 = 9.0;\nconst SPIKE_LEN: f32 = 0.68;\nconst SPIKE_SPEED:f32 = 32.0;\nconst PI: f32 =  3.141592653589;\n\n@fragment\nfn fragment(in: VertexOutput) -> @location(0) vec4<f32> {\n    var uv = in.uv;\n    uv = uv * 2.0 - 1.0;\n    let x =(atan2(uv.x, uv.y) / PI + 1) * SPIKE_NUM; // Divide the x coords by PI so they line up perfectly.\n\n    // 计算光针边缘\n    let f_x = fract(x);\n    var m = min(f_x, 1.0 - f_x);\n    m = m  + 0.5*length(uv);\n    \n    // 计算当前像素值:\n    var c = smoothstep(0.5,  0.0, m);\n    var col = vec3f(c);\n\n    // 全局时间计算指针位置\n    let time = globals.time;\n    let time_circle_index = floor(time * SPIKE_SPEED) % (SPIKE_NUM * 2.0);\n    let focus_length = min(abs(time_circle_index - x), abs(time_circle_index + 2*SPIKE_NUM - x));\n    let is_focused_spike = step(0.5, focus_length);\n    col *= mix(GOLD / 0.15, GOLD * 0.54, is_focused_spike);\n\n    // 不显示中间\n    let feet_mask = length(uv) - 0.25;\n    col *= smoothstep(0.0, 0.09, feet_mask);\n\n    // 输出\n    var out = vec4f(col, 1.0);\n    return out;\n}\n```\n\n# 闪烁线条\n## 介绍\n在表面形成闪烁变化的网格,grid函数显示宽度为`1.0/GRID_RATIO`的线条\n![](wgsl/light.png)\n\n## 代码\n```wgsl\n#import bevy_pbr::mesh_view_bindings::globals\n#import bevy_sprite::mesh2d_vertex_output::VertexOutput\n\nconst GRID_RATIO:f32 = 40.;\n\n@fragment\nfn fragment(in: VertexOutput) -> @location(0) vec4<f32> {\n    let t = globals.time;\n    var uv = in.uv - 0.5;\n    var col = vec3(0.0);\n\n    uv *= 10.;\n    let grid = grid(uv);\n    let pal = palette(t / 2. );\n    col = mix(col, pal, grid);\n   \n    return vec4<f32>(col, 1.0);\n}\n\n// 变幻彩色\nfn palette(time : f32) -> vec3<f32> {\n    let a = vec3<f32>(0.5, 0.5, 0.5);\n    let b = vec3<f32>(0.5, 0.5, 0.5);\n    let c = vec3<f32>(1.0, 1.0, 1.0);\n    let d = vec3<f32>(0.263, 0.416, 0.557);\n\n    return a + b * cos(6.28318 * (c * time + d));\n}\n\n// 显示网格\nfn grid(uv: vec2<f32>)-> f32 {\n    let i = step(fract(uv), vec2(1.0/GRID_RATIO));\n    return max(i.x, i.y);\n}\n\nfn hsv2rgb(c: vec3<f32>) -> vec3<f32> {\n    let K: vec4<f32> = vec4<f32>(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    var p: vec3<f32> = abs(fract(vec3<f32>(c.x) + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, vec3<f32>(0.0), vec3<f32>(1.0)), c.y);\n}\n```\n\n# 随机粒子\n物体表面随机生成随机运动的粒子.通过fft生成一个连续伪随机函数,随时间变化生成粒子的xy坐标,通过冰花过渡显示\n```js\n// js生成连续伪随机函数\ns = ''\nfor (let i = 0;i<10;i++) {\n  s += Math.random().toFixed(4) + '*sin('+Math.pow(2,i) +'*x)+' + Math.random().toFixed(4)  + '*cos('+Math.pow(2,i) +'*x)+'\n}\n\n```\n![](wgsl/points.png)\n\n## 代码\n```wgsl\n#import bevy_pbr::mesh_view_bindings globals\n#import bevy_sprite::mesh2d_vertex_output::VertexOutput\n\n@fragment\nfn fragment(in: VertexOutput) -> @location(0) vec4<f32> {\n    let uv: vec2<f32> = in.uv;\n\n    var m = 0.;\n    let t: f32 = globals.time / 100;\n    for (var i = 0; i < 30; i += 1) {\n        let n:vec2<f32> = vec2(rand(t + f32(i )* 2.0), rand(t + 0.5 + f32(i) * 2.0));\n        let d = length(uv - n);\n        m += smoothstep(0.002, 0.001, d);\n    }\n\n    var col = vec3(m);\n    return vec4(col, 1.0);\n}\n\n// fft构造的连续伪随机树\nfn rand(x: f32) -> f32 {\n    // fft 随机数\n    var y = 0.1042*sin(1*x)+0.7563*cos(1*x)+0.4530*sin(2*x)+0.6678*cos(2*x)+0.8024*sin(4*x)+0.1780*cos(4*x)+0.2779*sin(8*x)+0.4869*cos(8*x)+0.2147*sin(16*x)+0.5170*cos(16*x)+0.0115*sin(32*x)+0.6059*cos(32*x)+0.9722*sin(64*x)+0.1842*cos(64*x)+0.9056*sin(128*x)+0.6755*cos(128*x)+0.1378*sin(256*x)+0.6769*cos(256*x)+0.2455*sin(512*x)+0.8363*cos(512*x);\n    y = (y / 10) / 2 + 0.5;\n    return min(max(0.0, y), 1.0);\n}\n```","slug":"wgsl","published":1,"updated":"2025-01-09T03:22:04.632Z","comments":1,"layout":"post","photos":[],"_id":"cm5orle2r0000ksqugc8s3fpd","content":"<h1 id=\"指针着色器\"><a href=\"#指针着色器\" class=\"headerlink\" title=\"指针着色器\"></a>指针着色器</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><img src=\"2024/12/27/wgsl/aura.png\" class=\"\" title=\"光环着色器\">\n<p>这个着色器只包含片元着色器代码，通过对像素点uv的计算显示指针</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>atan2(y, x)</td>\n<td>计算y&#x2F;x的反正切值,返回值的范围是−π,π。返回一个值使得tan(e)&#x3D;y&#x2F;x</td>\n</tr>\n<tr>\n<td>smoothstep(min, max, x)</td>\n<td>平滑插值函数。公式：x * x * (3 - 2 * x)</td>\n</tr>\n<tr>\n<td>step(edge, x)</td>\n<td>阶跃函数，x&lt;edge返回0，x&gt;edge返回1</td>\n</tr>\n</tbody></table>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import bevy_pbr::forward_io::&#123;VertexOutput, FragmentOutput&#125;;</span><br><span class=\"line\">#import bevy_pbr::mesh_view_bindings::globals</span><br><span class=\"line\">#import bevy_render::view::View</span><br><span class=\"line\"></span><br><span class=\"line\">/// Keep up-to-date with the rust definition!</span><br><span class=\"line\">struct AuraMaterial &#123;</span><br><span class=\"line\">    unused: f32,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@group(0) @binding(0)   var&lt;uniform&gt; view: View;</span><br><span class=\"line\">@group(2) @binding(100) var&lt;uniform&gt; aura_mat: AuraMaterial;</span><br><span class=\"line\"></span><br><span class=\"line\">// Colour picker tells us the values of the original..</span><br><span class=\"line\">// Darkish</span><br><span class=\"line\">// #CEAA4F</span><br><span class=\"line\">const GOLD = vec3f(0.807843, 0.666667, 0.309804);</span><br><span class=\"line\">const SPIKE_NUM: f32 = 9.0;</span><br><span class=\"line\">const SPIKE_LEN: f32 = 0.68;</span><br><span class=\"line\">const SPIKE_SPEED:f32 = 32.0;</span><br><span class=\"line\">const PI: f32 =  3.141592653589;</span><br><span class=\"line\"></span><br><span class=\"line\">@fragment</span><br><span class=\"line\">fn fragment(in: VertexOutput) -&gt; @location(0) vec4&lt;f32&gt; &#123;</span><br><span class=\"line\">    var uv = in.uv;</span><br><span class=\"line\">    uv = uv * 2.0 - 1.0;</span><br><span class=\"line\">    let x =(atan2(uv.x, uv.y) / PI + 1) * SPIKE_NUM; // Divide the x coords by PI so they line up perfectly.</span><br><span class=\"line\"></span><br><span class=\"line\">    // 计算光针边缘</span><br><span class=\"line\">    let f_x = fract(x);</span><br><span class=\"line\">    var m = min(f_x, 1.0 - f_x);</span><br><span class=\"line\">    m = m  + 0.5*length(uv);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 计算当前像素值:</span><br><span class=\"line\">    var c = smoothstep(0.5,  0.0, m);</span><br><span class=\"line\">    var col = vec3f(c);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 全局时间计算指针位置</span><br><span class=\"line\">    let time = globals.time;</span><br><span class=\"line\">    let time_circle_index = floor(time * SPIKE_SPEED) % (SPIKE_NUM * 2.0);</span><br><span class=\"line\">    let focus_length = min(abs(time_circle_index - x), abs(time_circle_index + 2*SPIKE_NUM - x));</span><br><span class=\"line\">    let is_focused_spike = step(0.5, focus_length);</span><br><span class=\"line\">    col *= mix(GOLD / 0.15, GOLD * 0.54, is_focused_spike);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 不显示中间</span><br><span class=\"line\">    let feet_mask = length(uv) - 0.25;</span><br><span class=\"line\">    col *= smoothstep(0.0, 0.09, feet_mask);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 输出</span><br><span class=\"line\">    var out = vec4f(col, 1.0);</span><br><span class=\"line\">    return out;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"闪烁线条\"><a href=\"#闪烁线条\" class=\"headerlink\" title=\"闪烁线条\"></a>闪烁线条</h1><h2 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>在表面形成闪烁变化的网格,grid函数显示宽度为<code>1.0/GRID_RATIO</code>的线条</p>\n<img src=\"2024/12/27/wgsl/light.png\" class=\"\">\n\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import bevy_pbr::mesh_view_bindings::globals</span><br><span class=\"line\">#import bevy_sprite::mesh2d_vertex_output::VertexOutput</span><br><span class=\"line\"></span><br><span class=\"line\">const GRID_RATIO:f32 = 40.;</span><br><span class=\"line\"></span><br><span class=\"line\">@fragment</span><br><span class=\"line\">fn fragment(in: VertexOutput) -&gt; @location(0) vec4&lt;f32&gt; &#123;</span><br><span class=\"line\">    let t = globals.time;</span><br><span class=\"line\">    var uv = in.uv - 0.5;</span><br><span class=\"line\">    var col = vec3(0.0);</span><br><span class=\"line\"></span><br><span class=\"line\">    uv *= 10.;</span><br><span class=\"line\">    let grid = grid(uv);</span><br><span class=\"line\">    let pal = palette(t / 2. );</span><br><span class=\"line\">    col = mix(col, pal, grid);</span><br><span class=\"line\">   </span><br><span class=\"line\">    return vec4&lt;f32&gt;(col, 1.0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 变幻彩色</span><br><span class=\"line\">fn palette(time : f32) -&gt; vec3&lt;f32&gt; &#123;</span><br><span class=\"line\">    let a = vec3&lt;f32&gt;(0.5, 0.5, 0.5);</span><br><span class=\"line\">    let b = vec3&lt;f32&gt;(0.5, 0.5, 0.5);</span><br><span class=\"line\">    let c = vec3&lt;f32&gt;(1.0, 1.0, 1.0);</span><br><span class=\"line\">    let d = vec3&lt;f32&gt;(0.263, 0.416, 0.557);</span><br><span class=\"line\"></span><br><span class=\"line\">    return a + b * cos(6.28318 * (c * time + d));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 显示网格</span><br><span class=\"line\">fn grid(uv: vec2&lt;f32&gt;)-&gt; f32 &#123;</span><br><span class=\"line\">    let i = step(fract(uv), vec2(1.0/GRID_RATIO));</span><br><span class=\"line\">    return max(i.x, i.y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn hsv2rgb(c: vec3&lt;f32&gt;) -&gt; vec3&lt;f32&gt; &#123;</span><br><span class=\"line\">    let K: vec4&lt;f32&gt; = vec4&lt;f32&gt;(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);</span><br><span class=\"line\">    var p: vec3&lt;f32&gt; = abs(fract(vec3&lt;f32&gt;(c.x) + K.xyz) * 6.0 - K.www);</span><br><span class=\"line\">    return c.z * mix(K.xxx, clamp(p - K.xxx, vec3&lt;f32&gt;(0.0), vec3&lt;f32&gt;(1.0)), c.y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"随机粒子\"><a href=\"#随机粒子\" class=\"headerlink\" title=\"随机粒子\"></a>随机粒子</h1><p>物体表面随机生成随机运动的粒子.通过fft生成一个连续伪随机函数,随时间变化生成粒子的xy坐标,通过冰花过渡显示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js生成连续伪随机函数</span></span><br><span class=\"line\">s = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++) &#123;</span><br><span class=\"line\">  s += <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>().<span class=\"title function_\">toFixed</span>(<span class=\"number\">4</span>) + <span class=\"string\">&#x27;*sin(&#x27;</span>+<span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">2</span>,i) +<span class=\"string\">&#x27;*x)+&#x27;</span> + <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>().<span class=\"title function_\">toFixed</span>(<span class=\"number\">4</span>)  + <span class=\"string\">&#x27;*cos(&#x27;</span>+<span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">2</span>,i) +<span class=\"string\">&#x27;*x)+&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<img src=\"2024/12/27/wgsl/points.png\" class=\"\">\n\n<h2 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import bevy_pbr::mesh_view_bindings globals</span><br><span class=\"line\">#import bevy_sprite::mesh2d_vertex_output::VertexOutput</span><br><span class=\"line\"></span><br><span class=\"line\">@fragment</span><br><span class=\"line\">fn fragment(in: VertexOutput) -&gt; @location(0) vec4&lt;f32&gt; &#123;</span><br><span class=\"line\">    let uv: vec2&lt;f32&gt; = in.uv;</span><br><span class=\"line\"></span><br><span class=\"line\">    var m = 0.;</span><br><span class=\"line\">    let t: f32 = globals.time / 100;</span><br><span class=\"line\">    for (var i = 0; i &lt; 30; i += 1) &#123;</span><br><span class=\"line\">        let n:vec2&lt;f32&gt; = vec2(rand(t + f32(i )* 2.0), rand(t + 0.5 + f32(i) * 2.0));</span><br><span class=\"line\">        let d = length(uv - n);</span><br><span class=\"line\">        m += smoothstep(0.002, 0.001, d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    var col = vec3(m);</span><br><span class=\"line\">    return vec4(col, 1.0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// fft构造的连续伪随机树</span><br><span class=\"line\">fn rand(x: f32) -&gt; f32 &#123;</span><br><span class=\"line\">    // fft 随机数</span><br><span class=\"line\">    var y = 0.1042*sin(1*x)+0.7563*cos(1*x)+0.4530*sin(2*x)+0.6678*cos(2*x)+0.8024*sin(4*x)+0.1780*cos(4*x)+0.2779*sin(8*x)+0.4869*cos(8*x)+0.2147*sin(16*x)+0.5170*cos(16*x)+0.0115*sin(32*x)+0.6059*cos(32*x)+0.9722*sin(64*x)+0.1842*cos(64*x)+0.9056*sin(128*x)+0.6755*cos(128*x)+0.1378*sin(256*x)+0.6769*cos(256*x)+0.2455*sin(512*x)+0.8363*cos(512*x);</span><br><span class=\"line\">    y = (y / 10) / 2 + 0.5;</span><br><span class=\"line\">    return min(max(0.0, y), 1.0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"指针着色器\"><a href=\"#指针着色器\" class=\"headerlink\" title=\"指针着色器\"></a>指针着色器</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><img src=\"2024/12/27/wgsl/aura.png\" class=\"\" title=\"光环着色器\">\n<p>这个着色器只包含片元着色器代码，通过对像素点uv的计算显示指针</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>atan2(y, x)</td>\n<td>计算y&#x2F;x的反正切值,返回值的范围是−π,π。返回一个值使得tan(e)&#x3D;y&#x2F;x</td>\n</tr>\n<tr>\n<td>smoothstep(min, max, x)</td>\n<td>平滑插值函数。公式：x * x * (3 - 2 * x)</td>\n</tr>\n<tr>\n<td>step(edge, x)</td>\n<td>阶跃函数，x&lt;edge返回0，x&gt;edge返回1</td>\n</tr>\n</tbody></table>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import bevy_pbr::forward_io::&#123;VertexOutput, FragmentOutput&#125;;</span><br><span class=\"line\">#import bevy_pbr::mesh_view_bindings::globals</span><br><span class=\"line\">#import bevy_render::view::View</span><br><span class=\"line\"></span><br><span class=\"line\">/// Keep up-to-date with the rust definition!</span><br><span class=\"line\">struct AuraMaterial &#123;</span><br><span class=\"line\">    unused: f32,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@group(0) @binding(0)   var&lt;uniform&gt; view: View;</span><br><span class=\"line\">@group(2) @binding(100) var&lt;uniform&gt; aura_mat: AuraMaterial;</span><br><span class=\"line\"></span><br><span class=\"line\">// Colour picker tells us the values of the original..</span><br><span class=\"line\">// Darkish</span><br><span class=\"line\">// #CEAA4F</span><br><span class=\"line\">const GOLD = vec3f(0.807843, 0.666667, 0.309804);</span><br><span class=\"line\">const SPIKE_NUM: f32 = 9.0;</span><br><span class=\"line\">const SPIKE_LEN: f32 = 0.68;</span><br><span class=\"line\">const SPIKE_SPEED:f32 = 32.0;</span><br><span class=\"line\">const PI: f32 =  3.141592653589;</span><br><span class=\"line\"></span><br><span class=\"line\">@fragment</span><br><span class=\"line\">fn fragment(in: VertexOutput) -&gt; @location(0) vec4&lt;f32&gt; &#123;</span><br><span class=\"line\">    var uv = in.uv;</span><br><span class=\"line\">    uv = uv * 2.0 - 1.0;</span><br><span class=\"line\">    let x =(atan2(uv.x, uv.y) / PI + 1) * SPIKE_NUM; // Divide the x coords by PI so they line up perfectly.</span><br><span class=\"line\"></span><br><span class=\"line\">    // 计算光针边缘</span><br><span class=\"line\">    let f_x = fract(x);</span><br><span class=\"line\">    var m = min(f_x, 1.0 - f_x);</span><br><span class=\"line\">    m = m  + 0.5*length(uv);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 计算当前像素值:</span><br><span class=\"line\">    var c = smoothstep(0.5,  0.0, m);</span><br><span class=\"line\">    var col = vec3f(c);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 全局时间计算指针位置</span><br><span class=\"line\">    let time = globals.time;</span><br><span class=\"line\">    let time_circle_index = floor(time * SPIKE_SPEED) % (SPIKE_NUM * 2.0);</span><br><span class=\"line\">    let focus_length = min(abs(time_circle_index - x), abs(time_circle_index + 2*SPIKE_NUM - x));</span><br><span class=\"line\">    let is_focused_spike = step(0.5, focus_length);</span><br><span class=\"line\">    col *= mix(GOLD / 0.15, GOLD * 0.54, is_focused_spike);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 不显示中间</span><br><span class=\"line\">    let feet_mask = length(uv) - 0.25;</span><br><span class=\"line\">    col *= smoothstep(0.0, 0.09, feet_mask);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 输出</span><br><span class=\"line\">    var out = vec4f(col, 1.0);</span><br><span class=\"line\">    return out;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"闪烁线条\"><a href=\"#闪烁线条\" class=\"headerlink\" title=\"闪烁线条\"></a>闪烁线条</h1><h2 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>在表面形成闪烁变化的网格,grid函数显示宽度为<code>1.0/GRID_RATIO</code>的线条</p>\n<img src=\"2024/12/27/wgsl/light.png\" class=\"\">\n\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import bevy_pbr::mesh_view_bindings::globals</span><br><span class=\"line\">#import bevy_sprite::mesh2d_vertex_output::VertexOutput</span><br><span class=\"line\"></span><br><span class=\"line\">const GRID_RATIO:f32 = 40.;</span><br><span class=\"line\"></span><br><span class=\"line\">@fragment</span><br><span class=\"line\">fn fragment(in: VertexOutput) -&gt; @location(0) vec4&lt;f32&gt; &#123;</span><br><span class=\"line\">    let t = globals.time;</span><br><span class=\"line\">    var uv = in.uv - 0.5;</span><br><span class=\"line\">    var col = vec3(0.0);</span><br><span class=\"line\"></span><br><span class=\"line\">    uv *= 10.;</span><br><span class=\"line\">    let grid = grid(uv);</span><br><span class=\"line\">    let pal = palette(t / 2. );</span><br><span class=\"line\">    col = mix(col, pal, grid);</span><br><span class=\"line\">   </span><br><span class=\"line\">    return vec4&lt;f32&gt;(col, 1.0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 变幻彩色</span><br><span class=\"line\">fn palette(time : f32) -&gt; vec3&lt;f32&gt; &#123;</span><br><span class=\"line\">    let a = vec3&lt;f32&gt;(0.5, 0.5, 0.5);</span><br><span class=\"line\">    let b = vec3&lt;f32&gt;(0.5, 0.5, 0.5);</span><br><span class=\"line\">    let c = vec3&lt;f32&gt;(1.0, 1.0, 1.0);</span><br><span class=\"line\">    let d = vec3&lt;f32&gt;(0.263, 0.416, 0.557);</span><br><span class=\"line\"></span><br><span class=\"line\">    return a + b * cos(6.28318 * (c * time + d));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 显示网格</span><br><span class=\"line\">fn grid(uv: vec2&lt;f32&gt;)-&gt; f32 &#123;</span><br><span class=\"line\">    let i = step(fract(uv), vec2(1.0/GRID_RATIO));</span><br><span class=\"line\">    return max(i.x, i.y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn hsv2rgb(c: vec3&lt;f32&gt;) -&gt; vec3&lt;f32&gt; &#123;</span><br><span class=\"line\">    let K: vec4&lt;f32&gt; = vec4&lt;f32&gt;(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);</span><br><span class=\"line\">    var p: vec3&lt;f32&gt; = abs(fract(vec3&lt;f32&gt;(c.x) + K.xyz) * 6.0 - K.www);</span><br><span class=\"line\">    return c.z * mix(K.xxx, clamp(p - K.xxx, vec3&lt;f32&gt;(0.0), vec3&lt;f32&gt;(1.0)), c.y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"随机粒子\"><a href=\"#随机粒子\" class=\"headerlink\" title=\"随机粒子\"></a>随机粒子</h1><p>物体表面随机生成随机运动的粒子.通过fft生成一个连续伪随机函数,随时间变化生成粒子的xy坐标,通过冰花过渡显示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js生成连续伪随机函数</span></span><br><span class=\"line\">s = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++) &#123;</span><br><span class=\"line\">  s += <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>().<span class=\"title function_\">toFixed</span>(<span class=\"number\">4</span>) + <span class=\"string\">&#x27;*sin(&#x27;</span>+<span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">2</span>,i) +<span class=\"string\">&#x27;*x)+&#x27;</span> + <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>().<span class=\"title function_\">toFixed</span>(<span class=\"number\">4</span>)  + <span class=\"string\">&#x27;*cos(&#x27;</span>+<span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">2</span>,i) +<span class=\"string\">&#x27;*x)+&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<img src=\"2024/12/27/wgsl/points.png\" class=\"\">\n\n<h2 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import bevy_pbr::mesh_view_bindings globals</span><br><span class=\"line\">#import bevy_sprite::mesh2d_vertex_output::VertexOutput</span><br><span class=\"line\"></span><br><span class=\"line\">@fragment</span><br><span class=\"line\">fn fragment(in: VertexOutput) -&gt; @location(0) vec4&lt;f32&gt; &#123;</span><br><span class=\"line\">    let uv: vec2&lt;f32&gt; = in.uv;</span><br><span class=\"line\"></span><br><span class=\"line\">    var m = 0.;</span><br><span class=\"line\">    let t: f32 = globals.time / 100;</span><br><span class=\"line\">    for (var i = 0; i &lt; 30; i += 1) &#123;</span><br><span class=\"line\">        let n:vec2&lt;f32&gt; = vec2(rand(t + f32(i )* 2.0), rand(t + 0.5 + f32(i) * 2.0));</span><br><span class=\"line\">        let d = length(uv - n);</span><br><span class=\"line\">        m += smoothstep(0.002, 0.001, d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    var col = vec3(m);</span><br><span class=\"line\">    return vec4(col, 1.0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// fft构造的连续伪随机树</span><br><span class=\"line\">fn rand(x: f32) -&gt; f32 &#123;</span><br><span class=\"line\">    // fft 随机数</span><br><span class=\"line\">    var y = 0.1042*sin(1*x)+0.7563*cos(1*x)+0.4530*sin(2*x)+0.6678*cos(2*x)+0.8024*sin(4*x)+0.1780*cos(4*x)+0.2779*sin(8*x)+0.4869*cos(8*x)+0.2147*sin(16*x)+0.5170*cos(16*x)+0.0115*sin(32*x)+0.6059*cos(32*x)+0.9722*sin(64*x)+0.1842*cos(64*x)+0.9056*sin(128*x)+0.6755*cos(128*x)+0.1378*sin(256*x)+0.6769*cos(256*x)+0.2455*sin(512*x)+0.8363*cos(512*x);</span><br><span class=\"line\">    y = (y / 10) / 2 + 0.5;</span><br><span class=\"line\">    return min(max(0.0, y), 1.0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/wgsl/aura.png","post":"cm5orle2r0000ksqugc8s3fpd","slug":"aura.png","modified":1,"renderable":0},{"_id":"source/_posts/wgsl/light.png","post":"cm5orle2r0000ksqugc8s3fpd","slug":"light.png","modified":1,"renderable":0},{"_id":"source/_posts/wgsl/points.png","post":"cm5orle2r0000ksqugc8s3fpd","slug":"points.png","modified":1,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}